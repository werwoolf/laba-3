/*
 * Vestra Compliance API
 *
 * Vestra Compliance Backend REST API for managing users, tasks, and compliance-related operations. This is version 1.0; future versions may introduce breaking changes. All endpoints require authentication unless explicitly stated otherwise.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CreateTaskResultRequest : Request body for recording a task's result.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateTaskResultRequest {
    /// Identifier of the task.
    #[serde(rename = "task_id")]
    pub task_id: i32,
    /// Optional identifier for an existing task result, if updating.
    #[serde(rename = "task_result_id", skip_serializing_if = "Option::is_none")]
    pub task_result_id: Option<i32>,
    #[serde(rename = "result")]
    pub result: models::TaskResult,
    /// Data submitted for the task's associated form.
    #[serde(rename = "form_results")]
    pub form_results: serde_json::Value,
    /// List of register results associated with the task.
    #[serde(rename = "registers", skip_serializing_if = "Option::is_none")]
    pub registers: Option<Vec<models::RegisterResultRequest>>,
}

impl CreateTaskResultRequest {
    /// Request body for recording a task's result.
    pub fn new(task_id: i32, result: models::TaskResult, form_results: serde_json::Value) -> CreateTaskResultRequest {
        CreateTaskResultRequest {
            task_id,
            task_result_id: None,
            result,
            form_results,
            registers: None,
        }
    }
}

