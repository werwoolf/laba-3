/*
 * Vestra Compliance API
 *
 * Vestra Compliance Backend REST API for managing users, tasks, and compliance-related operations. This is version 1.0; future versions may introduce breaking changes. All endpoints require authentication unless explicitly stated otherwise.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// UserResponse : Detailed representation of a user, including authentication and role information.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserResponse {
    /// Unique identifier for the user.
    #[serde(rename = "id")]
    pub id: i32,
    /// User's email address, used for login and notifications.
    #[serde(rename = "email")]
    pub email: String,
    /// User's first name.
    #[serde(rename = "first_name")]
    pub first_name: String,
    /// User's last name.
    #[serde(rename = "last_name")]
    pub last_name: String,
    /// Timestamp when the user was created.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// Timestamp when the user was last updated.
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    /// Identifier for the user's avatar in storage, if applicable.
    #[serde(rename = "avatar_storage_item_id", skip_serializing_if = "Option::is_none")]
    pub avatar_storage_item_id: Option<String>,
    /// Indicates whether two-factor authentication is enabled for the user.
    #[serde(rename = "is_enabled_tfa", skip_serializing_if = "Option::is_none")]
    pub is_enabled_tfa: Option<bool>,
    /// URL to the user's avatar image, if available.
    #[serde(rename = "avatar_url", skip_serializing_if = "Option::is_none")]
    pub avatar_url: Option<String>,
    /// List of roles assigned to the user (e.g., admin, user).
    #[serde(rename = "roles", skip_serializing_if = "Option::is_none")]
    pub roles: Option<Vec<models::UserRole>>,
    /// Unique identifier for the user in the Keycloak authentication system.
    #[serde(rename = "keycloak_user_id", skip_serializing_if = "Option::is_none")]
    pub keycloak_user_id: Option<String>,
}

impl UserResponse {
    /// Detailed representation of a user, including authentication and role information.
    pub fn new(id: i32, email: String, first_name: String, last_name: String) -> UserResponse {
        UserResponse {
            id,
            email,
            first_name,
            last_name,
            created_at: None,
            updated_at: None,
            avatar_storage_item_id: None,
            is_enabled_tfa: None,
            avatar_url: None,
            roles: None,
            keycloak_user_id: None,
        }
    }
}

