/*
 * Vestra Compliance API
 *
 * Vestra Compliance Backend REST API for managing users, tasks, and compliance-related operations. This is version 1.0; future versions may introduce breaking changes. All endpoints require authentication unless explicitly stated otherwise.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// UpdateTaskRequest : Request body for updating an existing task's details.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UpdateTaskRequest {
    /// Unique identifier of the task to update.
    #[serde(rename = "id")]
    pub id: i32,
    /// Updated name or title of the task.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "priority", skip_serializing_if = "Option::is_none")]
    pub priority: Option<models::TaskPriority>,
    /// Updated initial due date for the task.
    #[serde(rename = "first_due_date", skip_serializing_if = "Option::is_none")]
    pub first_due_date: Option<String>,
    /// Updated timestamp when the task becomes active.
    #[serde(rename = "start_date", skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    /// Updated rule defining the task's recurrence pattern (e.g., 'daily', 'weekly').
    #[serde(rename = "recurrency_rule", skip_serializing_if = "Option::is_none")]
    pub recurrency_rule: Option<String>,
    /// Indicates whether the task must be completed by all employees.
    #[serde(rename = "is_every_employee_needs_to_complete", skip_serializing_if = "Option::is_none")]
    pub is_every_employee_needs_to_complete: Option<bool>,
    /// Updated identifier of the form associated with the task.
    #[serde(rename = "form_id", skip_serializing_if = "Option::is_none")]
    pub form_id: Option<i32>,
    /// Updated detailed description of the task's purpose or requirements.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Updated list of reminders for the task's due date.
    #[serde(rename = "due_remainders", skip_serializing_if = "Option::is_none")]
    pub due_remainders: Option<Vec<models::CreateDueRemainderRequest>>,
    /// Updated list of user IDs subscribed to overdue notifications.
    #[serde(rename = "users_overdue_subs", skip_serializing_if = "Option::is_none")]
    pub users_overdue_subs: Option<Vec<i32>>,
    /// Updated list of user IDs assigned to the task.
    #[serde(rename = "user_ids", skip_serializing_if = "Option::is_none")]
    pub user_ids: Option<Vec<i32>>,
    /// Updated list of user IDs subscribed to completion notifications.
    #[serde(rename = "users_completed_subs", skip_serializing_if = "Option::is_none")]
    pub users_completed_subs: Option<Vec<i32>>,
}

impl UpdateTaskRequest {
    /// Request body for updating an existing task's details.
    pub fn new(id: i32) -> UpdateTaskRequest {
        UpdateTaskRequest {
            id,
            name: None,
            priority: None,
            first_due_date: None,
            start_date: None,
            recurrency_rule: None,
            is_every_employee_needs_to_complete: None,
            form_id: None,
            description: None,
            due_remainders: None,
            users_overdue_subs: None,
            user_ids: None,
            users_completed_subs: None,
        }
    }
}

