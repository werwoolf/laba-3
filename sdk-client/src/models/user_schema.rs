/*
 * Vestra Compliance API
 *
 * Vestra Compliance Backend REST API for managing users, tasks, and compliance-related operations. This is version 1.0; future versions may introduce breaking changes. All endpoints require authentication unless explicitly stated otherwise.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// UserSchema : Represents a user with role information, used in contexts requiring role-based access.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserSchema {
    /// Unique identifier for the user.
    #[serde(rename = "id")]
    pub id: i32,
    /// User's first name.
    #[serde(rename = "first_name")]
    pub first_name: String,
    /// User's last name.
    #[serde(rename = "last_name")]
    pub last_name: String,
    /// User's email address.
    #[serde(rename = "email")]
    pub email: String,
    #[serde(rename = "role")]
    pub role: models::UserRole,
    /// Timestamp when the user was created.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// Timestamp when the user was last updated.
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
}

impl UserSchema {
    /// Represents a user with role information, used in contexts requiring role-based access.
    pub fn new(id: i32, first_name: String, last_name: String, email: String, role: models::UserRole) -> UserSchema {
        UserSchema {
            id,
            first_name,
            last_name,
            email,
            role,
            created_at: None,
            updated_at: None,
        }
    }
}

