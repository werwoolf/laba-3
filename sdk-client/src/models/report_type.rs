/*
 * Vestra Compliance API
 *
 * Vestra Compliance Backend REST API for managing users, tasks, and compliance-related operations. This is version 1.0; future versions may introduce breaking changes. All endpoints require authentication unless explicitly stated otherwise.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ReportType : Type of report: 'task_activity_report' for task activities, 'overdue_tasks_report' for overdue tasks, 'task_results_report' for task results, 'incident_report' for incidents.
/// Type of report: 'task_activity_report' for task activities, 'overdue_tasks_report' for overdue tasks, 'task_results_report' for task results, 'incident_report' for incidents.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ReportType {
    #[serde(rename = "task_activity_report")]
    TaskActivityReport,
    #[serde(rename = "overdue_tasks_report")]
    OverdueTasksReport,
    #[serde(rename = "task_results_report")]
    TaskResultsReport,
    #[serde(rename = "incident_report")]
    IncidentReport,

}

impl std::fmt::Display for ReportType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::TaskActivityReport => write!(f, "task_activity_report"),
            Self::OverdueTasksReport => write!(f, "overdue_tasks_report"),
            Self::TaskResultsReport => write!(f, "task_results_report"),
            Self::IncidentReport => write!(f, "incident_report"),
        }
    }
}

impl Default for ReportType {
    fn default() -> ReportType {
        Self::TaskActivityReport
    }
}

