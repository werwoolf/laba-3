/*
 * Vestra Compliance API
 *
 * Vestra Compliance Backend REST API for managing users, tasks, and compliance-related operations. This is version 1.0; future versions may introduce breaking changes. All endpoints require authentication unless explicitly stated otherwise.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// RegisterResult : Result of a register check: 'compliant' for meeting requirements, 'not_compliant' for failing requirements, 'in_progress' for ongoing checks, 'non_applicable' for irrelevant checks.
/// Result of a register check: 'compliant' for meeting requirements, 'not_compliant' for failing requirements, 'in_progress' for ongoing checks, 'non_applicable' for irrelevant checks.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum RegisterResult {
    #[serde(rename = "compliant")]
    Compliant,
    #[serde(rename = "not_compliant")]
    NotCompliant,
    #[serde(rename = "in_progress")]
    InProgress,
    #[serde(rename = "non_applicable")]
    NonApplicable,

}

impl std::fmt::Display for RegisterResult {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Compliant => write!(f, "compliant"),
            Self::NotCompliant => write!(f, "not_compliant"),
            Self::InProgress => write!(f, "in_progress"),
            Self::NonApplicable => write!(f, "non_applicable"),
        }
    }
}

impl Default for RegisterResult {
    fn default() -> RegisterResult {
        Self::Compliant
    }
}

