/*
 * Vestra Compliance API
 *
 * Vestra Compliance Backend REST API for managing users, tasks, and compliance-related operations. This is version 1.0; future versions may introduce breaking changes. All endpoints require authentication unless explicitly stated otherwise.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// DueRemainder : Represents a reminder for a task's due date.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DueRemainder {
    /// Number of days before the due date to send the reminder.
    #[serde(rename = "days_before_due")]
    pub days_before_due: i32,
    /// If true, the reminder is sent when the task becomes overdue.
    #[serde(rename = "is_when_overdue")]
    pub is_when_overdue: bool,
    /// Frequency of the reminder (e.g., 'daily', 'weekly').
    #[serde(rename = "frequency")]
    pub frequency: String,
    /// Identifier of the associated task.
    #[serde(rename = "task_id")]
    pub task_id: i32,
    /// Timestamp when the reminder was created.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// Timestamp when the reminder was last updated.
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    /// Unique identifier for the reminder.
    #[serde(rename = "id")]
    pub id: i32,
}

impl DueRemainder {
    /// Represents a reminder for a task's due date.
    pub fn new(days_before_due: i32, is_when_overdue: bool, frequency: String, task_id: i32, id: i32) -> DueRemainder {
        DueRemainder {
            days_before_due,
            is_when_overdue,
            frequency,
            task_id,
            created_at: None,
            updated_at: None,
            id,
        }
    }
}

