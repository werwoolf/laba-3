/*
 * Vestra Compliance API
 *
 * Vestra Compliance Backend REST API for managing users, tasks, and compliance-related operations. This is version 1.0; future versions may introduce breaking changes. All endpoints require authentication unless explicitly stated otherwise.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// TaskWithRelationsResponse : Detailed task representation with related entities like form, users, results, and notifications.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TaskWithRelationsResponse {
    /// Unique identifier for the task.
    #[serde(rename = "id")]
    pub id: i32,
    /// Name or title of the task.
    #[serde(rename = "name")]
    pub name: String,
    /// Identifier of the user who created the task.
    #[serde(rename = "author_id")]
    pub author_id: i32,
    /// Detailed description of the task's purpose or requirements.
    #[serde(rename = "description")]
    pub description: String,
    /// Identifier of the form associated with the task.
    #[serde(rename = "form_id")]
    pub form_id: i32,
    #[serde(rename = "form")]
    pub form: Box<models::Form>,
    #[serde(rename = "priority")]
    pub priority: models::TaskPriority,
    /// Indicates whether the task must be completed by all employees.
    #[serde(rename = "is_every_employee_needs_to_complete")]
    pub is_every_employee_needs_to_complete: bool,
    /// Rule defining the task's recurrence pattern (e.g., 'daily', 'weekly'), if applicable.
    #[serde(rename = "recurrency_rule", skip_serializing_if = "Option::is_none")]
    pub recurrency_rule: Option<String>,
    /// Timestamp when the task becomes overdue, if applicable.
    #[serde(rename = "overdue_date", skip_serializing_if = "Option::is_none")]
    pub overdue_date: Option<String>,
    /// Initial due date for the task.
    #[serde(rename = "first_due_date")]
    pub first_due_date: String,
    /// Timestamp when the task was created.
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<String>,
    /// Timestamp when the task was last updated.
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    /// List of users assigned to the task.
    #[serde(rename = "users", skip_serializing_if = "Option::is_none")]
    pub users: Option<Vec<models::User>>,
    /// List of results recorded for the task.
    #[serde(rename = "task_results", skip_serializing_if = "Option::is_none")]
    pub task_results: Option<Vec<models::TaskResultSchema>>,
    /// List of reminders for the task's due date.
    #[serde(rename = "due_remainders", skip_serializing_if = "Option::is_none")]
    pub due_remainders: Option<Vec<models::DueRemainder>>,
    /// List of users subscribed to overdue notifications.
    #[serde(rename = "overdue_subs", skip_serializing_if = "Option::is_none")]
    pub overdue_subs: Option<Vec<models::User>>,
    /// List of users subscribed to completion notifications.
    #[serde(rename = "complete_subs", skip_serializing_if = "Option::is_none")]
    pub complete_subs: Option<Vec<models::User>>,
    /// Timestamp when the task becomes active.
    #[serde(rename = "start_date")]
    pub start_date: String,
}

impl TaskWithRelationsResponse {
    /// Detailed task representation with related entities like form, users, results, and notifications.
    pub fn new(id: i32, name: String, author_id: i32, description: String, form_id: i32, form: models::Form, priority: models::TaskPriority, is_every_employee_needs_to_complete: bool, first_due_date: String, start_date: String) -> TaskWithRelationsResponse {
        TaskWithRelationsResponse {
            id,
            name,
            author_id,
            description,
            form_id,
            form: Box::new(form),
            priority,
            is_every_employee_needs_to_complete,
            recurrency_rule: None,
            overdue_date: None,
            first_due_date,
            created_at: None,
            updated_at: None,
            users: None,
            task_results: None,
            due_remainders: None,
            overdue_subs: None,
            complete_subs: None,
            start_date,
        }
    }
}

