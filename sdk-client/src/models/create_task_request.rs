/*
 * Vestra Compliance API
 *
 * Vestra Compliance Backend REST API for managing users, tasks, and compliance-related operations. This is version 1.0; future versions may introduce breaking changes. All endpoints require authentication unless explicitly stated otherwise.
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CreateTaskRequest : Request body for creating a new task.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateTaskRequest {
    /// Name or title of the task.
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "priority")]
    pub priority: models::TaskPriority,
    /// Initial due date for the task.
    #[serde(rename = "first_due_date")]
    pub first_due_date: String,
    /// Rule defining the task's recurrence pattern (e.g., 'daily', 'weekly').
    #[serde(rename = "recurrency_rule", skip_serializing_if = "Option::is_none")]
    pub recurrency_rule: Option<String>,
    /// List of user IDs assigned to the task.
    #[serde(rename = "user_ids", skip_serializing_if = "Option::is_none")]
    pub user_ids: Option<Vec<i32>>,
    /// List of user IDs subscribed to overdue notifications.
    #[serde(rename = "users_overdue_subs", skip_serializing_if = "Option::is_none")]
    pub users_overdue_subs: Option<Vec<i32>>,
    /// List of user IDs subscribed to completion notifications.
    #[serde(rename = "users_completed_subs", skip_serializing_if = "Option::is_none")]
    pub users_completed_subs: Option<Vec<i32>>,
    /// If true, the task must be completed by all employees.
    #[serde(rename = "is_every_employee_needs_to_complete")]
    pub is_every_employee_needs_to_complete: bool,
    /// Identifier of the form associated with the task.
    #[serde(rename = "form_id")]
    pub form_id: i32,
    /// Detailed description of the task's purpose or requirements.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// List of reminders to send before or after the due date.
    #[serde(rename = "due_remainders", skip_serializing_if = "Option::is_none")]
    pub due_remainders: Option<Vec<models::CreateDueRemainderRequest>>,
    /// Date and time when the task becomes active.
    #[serde(rename = "start_date")]
    pub start_date: String,
}

impl CreateTaskRequest {
    /// Request body for creating a new task.
    pub fn new(name: String, priority: models::TaskPriority, first_due_date: String, is_every_employee_needs_to_complete: bool, form_id: i32, start_date: String) -> CreateTaskRequest {
        CreateTaskRequest {
            name,
            priority,
            first_due_date,
            recurrency_rule: None,
            user_ids: None,
            users_overdue_subs: None,
            users_completed_subs: None,
            is_every_employee_needs_to_complete,
            form_id,
            description: None,
            due_remainders: None,
            start_date,
        }
    }
}

